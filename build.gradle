plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '2.5.14'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.exercice'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot core
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JWT support
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // H2 in-memory database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // Jakarta Validation API
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Spock testing framework
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.0-groovy-3.0'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.9'

    // Spring Boot test support (excluding JUnit 4)
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()

    sourceSets {
        test {
            groovy {
                srcDirs = ['src/test/groovy']
            }
        }
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/com/exercice/cdi/exception/**, **/com/exercice/cdi/controller/dto/**, **/com/exercice/cdi/repository/entity/**'
                    ])
                })
        )
    }
}
